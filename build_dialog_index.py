import os
import json
import numpy as np
import faiss
from openai import OpenAI
from config import (
    OPENAI_API_KEY,
    DIALOG_CHUNKS_PATH,
    DIALOG_INDEX_PATH,
    REAL_DIALOGS_TXT_PATH  # ‚ùóÔ∏è –û–ù–û–í–õ–ï–ù–û
)

# === üîê –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ OpenAI ===
client = OpenAI(api_key=OPENAI_API_KEY)

# === üß© –†–æ–∑–±–∏—Ç—Ç—è –¥—ñ–∞–ª–æ–≥—É –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –ø–æ 2‚Äì4 —Ä–µ–ø–ª—ñ–∫–∏ ===
def split_dialog_into_chunks(dialog: str, min_len=2, max_len=4):
    lines = [line.strip() for line in dialog.splitlines() if line.strip()]
    chunks = []
    for i in range(0, len(lines) - min_len + 1):
        chunk = lines[i:i + max_len]
        if len(chunk) >= min_len:
            chunks.append("\n".join(chunk))
    return chunks

# === üîó –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –µ–º–±–µ–¥—ñ–Ω–≥—ñ–≤ OpenAI ===
def embed_texts(texts):
    if not texts:
        return []
    try:
        response = client.embeddings.create(
            model="text-embedding-3-small",
            input=texts
        )
        return [np.array(obj.embedding, dtype=np.float32) for obj in response.data]
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –µ–º–±–µ–¥—ñ–Ω–≥—ñ–≤: {e}")
        return [np.zeros((1536,), dtype=np.float32) for _ in texts]

# === üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤ –∑ TXT ===
def load_real_dialogs(path):
    if not os.path.exists(path):
        print(f"‚ùå –§–∞–π–ª {path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return []

    try:
        with open(path, "r", encoding="utf-8") as f:
            blocks = f.read().strip().split("\n\n")
        return [block.strip() for block in blocks if block.strip()]
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ {path}: {e}")
        return []

# === üß† –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø–æ–±—É–¥–æ–≤–∏ —ñ–Ω–¥–µ–∫—Å—É ===
def main():
    raw_dialogs = load_real_dialogs(REAL_DIALOGS_TXT_PATH)  # ‚ùóÔ∏è –û–ù–û–í–õ–ï–ù–û
    if not raw_dialogs:
        print("‚ö†Ô∏è –ù–µ–º–∞—î –≤–∞–ª—ñ–¥–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")
        return

    chunks = []
    for dialog in raw_dialogs:
        parts = split_dialog_into_chunks(dialog)
        chunks.extend(parts)

    chunks = [chunk for chunk in chunks if chunk.strip()]
    if not chunks:
        print("‚ö†Ô∏è –£—Å—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ –∞–±–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ.")
        return

    embeddings = embed_texts(chunks)
    if not embeddings or any(e.shape[0] == 0 for e in embeddings):
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤–∞–ª—ñ–¥–Ω—ñ –µ–º–±–µ–¥—ñ–Ω–≥–∏.")
        return

    dim = embeddings[0].shape[0]
    index = faiss.IndexFlatL2(dim)
    index.add(np.array(embeddings, dtype=np.float32))

    with open(DIALOG_CHUNKS_PATH, "w", encoding="utf-8") as f:
        json.dump([{"text": chunk} for chunk in chunks], f, ensure_ascii=False, indent=2)

    faiss.write_index(index, DIALOG_INDEX_PATH)
    print(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(chunks)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ–≤ —É —ñ–Ω–¥–µ–∫—Å ‚Üí {DIALOG_INDEX_PATH}")

# === üîÅ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ ===
if __name__ == "__main__":
    main()
