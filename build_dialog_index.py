# build_dialog_index.py

import os
import json
import numpy as np
import faiss
from openai import OpenAI
from config import (
    OPENAI_API_KEY,
    DIALOG_CHUNKS_PATH,
    DIALOG_INDEX_PATH,
    REAL_DIALOGS_PATH
)

# === üîê –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ OpenAI ===
client = OpenAI(api_key=OPENAI_API_KEY)

# === –†–æ–∑–±–∏—Ç—Ç—è –¥—ñ–∞–ª–æ–≥—É –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –ø–æ 2‚Äì4 —Ä–µ–ø–ª—ñ–∫–∏ ===
def split_dialog_into_chunks(dialog: str, min_len=2, max_len=4):
    lines = [line.strip() for line in dialog.splitlines() if line.strip()]
    chunks = []
    for i in range(0, len(lines) - min_len + 1):
        chunk = lines[i:i + max_len]
        if len(chunk) >= min_len:
            chunks.append("\n".join(chunk))
    return chunks

# === –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –µ–º–±–µ–¥—ñ–Ω–≥—ñ–≤ ===
def embed_texts(texts):
    if not texts:
        return []
    try:
        response = client.embeddings.create(
            model="text-embedding-3-small",
            input=texts
        )
        return [np.array(item.embedding, dtype=np.float32) for item in response.data]
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–º–±–µ–¥—ñ–Ω–≥—ñ–≤: {e}")
        return [np.zeros((1536,), dtype=np.float32) for _ in texts]

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤ ===
def load_real_dialogs(path):
    if not os.path.exists(path):
        print(f"‚ùå –§–∞–π–ª {path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return []

    try:
        with open(path, "r", encoding="utf-8") as f:
            raw = f.read()
        return [d.strip() for d in raw.split("\n\n") if d.strip()]
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ {path}: {e}")
        return []

# === –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ===
def main():
    dialogs = load_real_dialogs(REAL_DIALOGS_PATH)
    if not dialogs:
        print("‚ö†Ô∏è –ù–µ–º–∞—î –≤–∞–ª—ñ–¥–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")
        return

    all_chunks = []
    for dialog in dialogs:
        chunks = split_dialog_into_chunks(dialog)
        all_chunks.extend(chunks)

    all_chunks = [chunk for chunk in all_chunks if len(chunk.strip()) > 0]

    if not all_chunks:
        print("‚ö†Ô∏è –£—Å—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –ø—É—Å—Ç—ñ –∞–±–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ.")
        return

    embeddings = embed_texts(all_chunks)
    if not embeddings or any(e.shape[0] == 0 for e in embeddings):
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤–∞–ª—ñ–¥–Ω—ñ –µ–º–±–µ–¥—ñ–Ω–≥–∏.")
        return

    dim = embeddings[0].shape[0]
    index = faiss.IndexFlatL2(dim)
    index.add(np.array(embeddings, dtype=np.float32))

    with open(DIALOG_CHUNKS_PATH, "w", encoding="utf-8") as f:
        json.dump([{"text": chunk} for chunk in all_chunks], f, ensure_ascii=False, indent=2)

    faiss.write_index(index, DIALOG_INDEX_PATH)
    print(f"‚úÖ –Ü–Ω–¥–µ–∫—Å –∑ {len(all_chunks)} –¥—ñ–∞–ª–æ–≥—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚Üí {DIALOG_INDEX_PATH}")

# === –ó–∞–ø—É—Å–∫ —è–∫ —Å–∫—Ä–∏–ø—Ç–∞ ===
if __name__ == "__main__":
    main()
