import os
import json
import numpy as np
import faiss
from openai import OpenAI
from config import BAD_DIALOGS_PATH, BAD_INDEX_PATH

client = OpenAI()

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è bad-–¥—ñ–∞–ª–æ–≥—ñ–≤ --- #
try:
    with open(BAD_DIALOGS_PATH, "r", encoding="utf-8") as f:
        bad_texts = []
        for i, line in enumerate(f):
            try:
                obj = json.loads(line)
                if "text" in obj:
                    bad_texts.append(obj["text"])
            except json.JSONDecodeError:
                print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π JSON —É —Ä—è–¥–∫—É {i+1}")
except Exception as e:
    print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ bad_dialogs: {e}")
    bad_texts = []

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è FAISS-—ñ–Ω–¥–µ–∫—Å—É --- #
try:
    if os.path.exists(BAD_INDEX_PATH):
        bad_index = faiss.read_index(BAD_INDEX_PATH)
    else:
        raise FileNotFoundError("–Ü–Ω–¥–µ–∫—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
except Exception as e:
    print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ bad_index: {e}")
    bad_index = None


def compute_embedding(text):
    try:
        response = client.embeddings.create(
            model="text-embedding-3-small",
            input=[text]
        )
        return np.array(response.data[0].embedding, dtype=np.float32)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ embedding: {e}")
        return None


def check_similarity_with_bad(dialog_text, threshold=0.90):
    if not bad_index or not bad_texts:
        return False

    emb = compute_embedding(dialog_text)
    if emb is None:
        return False

    distances, indices = bad_index.search(np.array([emb]), k=1)
    similarity = 1 - distances[0][0]  # FAISS –ø–æ–≤–µ—Ä—Ç–∞—î L2-–¥–∏—Å—Ç–∞–Ω—Ü—ñ—é

    return similarity > threshold


def evaluate_dialog(dialog_history: list) -> dict:
    """
    –û—Ü—ñ–Ω—é—î –¥—ñ–∞–ª–æ–≥: –µ–≤—Ä–∏—Å—Ç–∏–∫–∞ + —Å—Ö–æ–∂—ñ—Å—Ç—å –∑ –ø–æ–≥–∞–Ω–∏–º–∏ –∫–µ–π—Å–∞–º–∏
    """
    dialog_text = format_dialog(dialog_history)
    score = heuristic_score(dialog_history)
    similar_bad = check_similarity_with_bad(dialog_text)

    return {
        "dialog_score": score,
        "similar_bad_case": similar_bad
    }


def heuristic_score(dialog: list) -> int:
    """
    –ü—Ä–æ—Å—Ç–µ –µ–≤—Ä–∏—Å—Ç–∏—á–Ω–µ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è:
    +1 –∑–∞ –∫–æ–∂–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ—ó
    -2, —è–∫—â–æ –º–µ–Ω—à–µ 3 —Ä–µ–ø–ª—ñ–∫
    -1, —è–∫—â–æ –æ—Å—Ç–∞–Ω–Ω—è —Ä–µ–ø–ª—ñ–∫–∞ ‚Äî –Ω–µ–≥–∞—Ç–∏–≤
    """
    user_replies = [m["from_user"] for m in dialog if "from_user" in m]
    score = len(user_replies) - 1  # –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –Ω–µ –≤–≤–∞–∂–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –¥—ñ–∞–ª–æ–≥—É

    if len(user_replies) < 3:
        score -= 2

    if user_replies:
        last = user_replies[-1].lower()
        if any(x in last for x in [
            "–Ω–µ —Ü—ñ–∫–∞–≤–æ", "–Ω–µ —Ö–æ—á—É", "–¥–æ –ø–æ–±–∞—á–µ–Ω–Ω—è", "–≤—ñ–¥—á–µ–ø–∏—Å—å", "—Ä–æ–∑–≤–æ–¥", "—Å–∫–∞–º",
            "–≤—ñ–¥—Å—Ç–∞–Ω—å", "–≤—ñ–¥–≤–∞–ª–∏", "–±—ñ–ª—å—à–µ –Ω–µ –ø–∏—à–∏"
        ]):
            score -= 1

    return max(score, 0)


def format_dialog(dialog: list) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —Å–ø–∏—Å–æ–∫ {"from_user", "from_ai"} —É —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"""
    lines = []
    for msg in dialog:
        if "from_user" in msg:
            lines.append(f"üë§ {msg['from_user']}")
        if "from_ai" in msg:
            lines.append(f"ü§ñ {msg['from_ai']}")
    return "\n".join(lines)
