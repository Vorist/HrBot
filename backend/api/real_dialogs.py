from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
import os
import json
from datetime import datetime
import logging

from config import GOOD_DIALOGS_PATH, BAD_DIALOGS_PATH
from backend.utils.jsonl_utils import append_jsonl, validate_dialog, load_jsonl

REAL_DIALOGS_PATH = "data/real_dialogs.txt"

router = APIRouter()
logger = logging.getLogger(__name__)

# ---------- üì¶ –ú–û–î–ï–õ–Ü ---------- #
class DialogRequest(BaseModel):
    source: str
    dialog: str

class ConvertRequest(BaseModel):
    index: int
    target: str  # "good" –∞–±–æ "bad"

# ---------- üîß –ü–ê–†–°–ò–ù–ì ---------- #
def parse_dialog_block(block: str):
    lines = block.strip().split("\n")
    if not lines:
        return None

    source = "–ù–µ–≤—ñ–¥–æ–º–µ –¥–∂–µ—Ä–µ–ª–æ"
    if lines[0].startswith("üì•"):
        source = lines[0].replace("üì•", "").replace("–î–∂–µ—Ä–µ–ª–æ:", "").strip()
        lines = lines[1:]

    dialog = []
    for line in lines:
        line = line.strip()
        if line.startswith("üë§"):
            dialog.append({"role": "user", "text": line[1:].strip()})
        elif line.startswith("ü§ñ"):
            dialog.append({"role": "bot", "text": line[1:].strip()})

    return {"source": source, "dialog": dialog} if dialog else None

def format_dialog_block(source: str, dialog: list[dict]):
    header = f"üì• –î–∂–µ—Ä–µ–ª–æ: {source.strip()}"
    lines = [
        f"üë§ {d['text']}" if d["role"] == "user" else f"ü§ñ {d['text']}"
        for d in dialog
    ]
    return header + "\n" + "\n".join(lines)

# ---------- üìÅ –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø/–ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø ---------- #
def load_real_dialogs():
    if not os.path.exists(REAL_DIALOGS_PATH):
        return []
    with open(REAL_DIALOGS_PATH, "r", encoding="utf-8") as f:
        blocks = f.read().strip().split("\n\n")
    dialogs = [parsed for block in blocks if (parsed := parse_dialog_block(block))]
    logger.info(f"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(dialogs)} —Ä–µ–∞–ª—å–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤")
    return dialogs

def save_real_dialogs(dialogs: list[dict]):
    os.makedirs(os.path.dirname(REAL_DIALOGS_PATH), exist_ok=True)
    blocks = [format_dialog_block(d["source"], d["dialog"]) for d in dialogs]
    with open(REAL_DIALOGS_PATH, "w", encoding="utf-8") as f:
        f.write("\n\n".join(blocks))
    logger.info(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(dialogs)} –¥—ñ–∞–ª–æ–≥—ñ–≤ —É real_dialogs.txt")

# ---------- üì° API –†–û–£–¢–ò ---------- #
@router.get("/")
def get_real_dialogs():
    return load_real_dialogs()

@router.post("/")
def add_real_dialog(req: DialogRequest):
    if not req.source.strip() or not req.dialog.strip():
        raise HTTPException(status_code=400, detail="–û–±–∏–¥–≤–∞ –ø–æ–ª—è –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ")

    formatted_text = f"üì• –î–∂–µ—Ä–µ–ª–æ: {req.source.strip()}\n{req.dialog.strip()}"
    parsed = parse_dialog_block(formatted_text)
    if not parsed:
        raise HTTPException(status_code=400, detail="–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥—ñ–∞–ª–æ–≥—É")

    if not validate_dialog(parsed["dialog"]):
        raise HTTPException(status_code=422, detail="–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –¥—ñ–∞–ª–æ–≥: –º–∞—î –±—É—Ç–∏ —á–µ—Ä–≥—É–≤–∞–Ω–Ω—è user ‚Üí bot ‚Üí user ‚Üí ...")

    existing = load_real_dialogs()
    if any(parsed["dialog"] == d["dialog"] and parsed["source"] == d["source"] for d in existing):
        raise HTTPException(status_code=409, detail="–¢–∞–∫–∏–π –¥—ñ–∞–ª–æ–≥ –≤–∂–µ —ñ—Å–Ω—É—î")

    existing.append(parsed)
    save_real_dialogs(existing)
    logger.info("‚úÖ –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π real-–¥—ñ–∞–ª–æ–≥")
    return parsed

@router.delete("/{index}")
def delete_real_dialog(index: int):
    dialogs = load_real_dialogs()
    if index < 0 or index >= len(dialogs):
        raise HTTPException(status_code=404, detail="–î—ñ–∞–ª–æ–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    removed = dialogs.pop(index)
    save_real_dialogs(dialogs)
    logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ real-–¥—ñ–∞–ª–æ–≥ –∑ —ñ–Ω–¥–µ–∫—Å–æ–º {index}")
    return {"deleted": removed}

@router.post("/convert")
def convert_dialog(req: ConvertRequest):
    dialogs = load_real_dialogs()
    if req.index < 0 or req.index >= len(dialogs):
        raise HTTPException(status_code=404, detail="–î—ñ–∞–ª–æ–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    item = dialogs.pop(req.index)
    save_real_dialogs(dialogs)

    entry = {
        "user": item["dialog"][0]["text"] if item["dialog"] else "–ö–∞–Ω–¥–∏–¥–∞—Ç",
        "date": datetime.now().strftime("%Y-%m-%d"),
        "dialog": item["dialog"]
    }

    if req.target == "good":
        append_jsonl(GOOD_DIALOGS_PATH, entry)
    elif req.target == "bad":
        append_jsonl(BAD_DIALOGS_PATH, entry)
    else:
        raise HTTPException(status_code=400, detail="–¢–∏–ø –º–∞—î –±—É—Ç–∏ 'good' –∞–±–æ 'bad'")

    logger.info(f"üì§ –î—ñ–∞–ª–æ–≥ real ‚Üí {req.target}")
    return {"moved": req.target, "saved": True}
