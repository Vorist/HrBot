from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, validator
from typing import List, Literal
from datetime import datetime
from hashlib import md5
import json
import logging

from config import GOOD_DIALOGS_PATH, BAD_DIALOGS_PATH, FEEDBACK_LESSONS_PATH
from backend.utils.jsonl_utils import append_jsonl, load_jsonl, save_jsonl, validate_dialog

router = APIRouter()
logger = logging.getLogger(__name__)

# ---------- üì¶ –ú–æ–¥–µ–ª—ñ ---------- #

class Replica(BaseModel):
    role: Literal["user", "bot"]
    text: str

class DialogItem(BaseModel):
    user: str = "–ö–∞–Ω–¥–∏–¥–∞—Ç"
    dialog: List[Replica]

    @validator("dialog")
    def validate_roles(cls, value):
        roles = [r.role for r in value]
        if "user" not in roles or "bot" not in roles:
            raise ValueError("–î—ñ–∞–ª–æ–≥ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω–æ–≥–æ user —ñ –æ–¥–Ω–æ–≥–æ bot")
        return value

class FeedbackRequest(BaseModel):
    index: int
    comment: str

# ---------- üß∞ –£—Ç–∏–ª—ñ—Ç–∏ ---------- #

def dialog_hash(dialog):
    return md5(json.dumps(dialog, ensure_ascii=False, sort_keys=True).encode("utf-8")).hexdigest()

# ---------- üîó API ---------- #

@router.get("/")
def get_good_dialogs():
    """üì• –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ good-–¥—ñ–∞–ª–æ–≥–∏"""
    items = load_jsonl(GOOD_DIALOGS_PATH)
    logger.info(f"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(items)} good-–¥—ñ–∞–ª–æ–≥—ñ–≤")
    return {"success": True, "items": items}

@router.post("/")
def add_good_dialog(item: DialogItem):
    """‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π good-–¥—ñ–∞–ª–æ–≥"""
    dialog_data = [r.dict() for r in item.dialog]
    if not validate_dialog(dialog_data):
        raise HTTPException(status_code=422, detail="–î—ñ–∞–ª–æ–≥ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —á–µ—Ä–≥—É–≤–∞–Ω–Ω—è user ‚Üí bot ‚Üí user ‚Üí ...")

    dialogs = load_jsonl(GOOD_DIALOGS_PATH)

    new_entry = {
        "user": item.user.strip() or "–ö–∞–Ω–¥–∏–¥–∞—Ç",
        "date": datetime.now().strftime("%Y-%m-%d"),
        "dialog": dialog_data
    }

    existing_hashes = {dialog_hash(d["dialog"]) for d in dialogs if "dialog" in d}
    if dialog_hash(new_entry["dialog"]) in existing_hashes:
        raise HTTPException(status_code=409, detail="‚ö†Ô∏è –î—ñ–∞–ª–æ–≥ –≤–∂–µ —ñ—Å–Ω—É—î")

    append_jsonl(GOOD_DIALOGS_PATH, new_entry)
    logger.info("‚úÖ –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π good-–¥—ñ–∞–ª–æ–≥")
    return {"success": True, "added": new_entry}

@router.delete("/{index}")
def delete_good_dialog(index: int):
    """üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ good-–¥—ñ–∞–ª–æ–≥"""
    dialogs = load_jsonl(GOOD_DIALOGS_PATH)
    if 0 <= index < len(dialogs):
        deleted = dialogs.pop(index)
        save_jsonl(GOOD_DIALOGS_PATH, dialogs)
        logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ good-–¥—ñ–∞–ª–æ–≥ –∑ —ñ–Ω–¥–µ–∫—Å–æ–º {index}")
        return {"success": True, "deleted": deleted}

    raise HTTPException(status_code=404, detail="–î—ñ–∞–ª–æ–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

@router.post("/feedback")
def mark_as_bad(req: FeedbackRequest):
    """üîÅ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥ —è–∫ bad + –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ—ñ–¥–±–µ–∫"""
    dialogs = load_jsonl(GOOD_DIALOGS_PATH)

    if not (0 <= req.index < len(dialogs)):
        raise HTTPException(status_code=404, detail="–î—ñ–∞–ª–æ–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    dialog = dialogs.pop(req.index)
    save_jsonl(GOOD_DIALOGS_PATH, dialogs)
    append_jsonl(BAD_DIALOGS_PATH, dialog)

    feedback_entry = {
        "from": "good_dialogs",
        "status": "moved_to_bad",
        "comment": req.comment.strip(),
        "dialog": dialog,
        "timestamp": datetime.now().isoformat()
    }
    append_jsonl(FEEDBACK_LESSONS_PATH, feedback_entry)

    logger.info("üì§ –î—ñ–∞–ª–æ–≥ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∑ good ‚Üí bad —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —Ñ—ñ–¥–±–µ–∫")
    return {"success": True, "moved_to": "bad", "feedback_saved": True}
