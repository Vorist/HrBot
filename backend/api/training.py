from fastapi import APIRouter, Response, HTTPException
from typing import Optional, List
import subprocess
import os
import logging

router = APIRouter()
logger = logging.getLogger(__name__)

# === üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
TRAINER_DIR = "trainer"
TIMEOUT = 300  # —Å–µ–∫—É–Ω–¥

ALLOWED_SCRIPTS = {
    "train_from_good.py",
    "train_from_bad.py",
    "feedback_processor.py",
    "training.py",
}


def run_script(script_name: str, args: Optional[List[str]] = None) -> Response:
    """
    –ó–∞–ø—É—Å–∫–∞—î python-—Å–∫—Ä–∏–ø—Ç –∑ trainer/, –¥–æ–∑–≤–æ–ª—è—î –ø–µ—Ä–µ–¥–∞—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏.
    """
    if script_name not in ALLOWED_SCRIPTS:
        logger.warning(f"‚õî –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π —Å–∫—Ä–∏–ø—Ç: {script_name}")
        raise HTTPException(status_code=400, detail=f"‚õî –°–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏.")

    command = ["python", os.path.join(TRAINER_DIR, script_name)]
    if args:
        command.extend(args)

    try:
        logger.info(f"üîß –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞: {' '.join(command)}")
        result = subprocess.run(
            command,
            capture_output=True,
            text=True,
            timeout=TIMEOUT
        )

        stdout = result.stdout.strip()
        stderr = result.stderr.strip()

        if result.returncode == 0:
            logger.info("‚úÖ –ù–∞–≤—á–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            return Response(content=stdout, status_code=200, media_type="text/plain")
        else:
            logger.error(f"‚ùå –ù–∞–≤—á–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –∑ –∫–æ–¥–æ–º {result.returncode}")
            return Response(
                content=f"‚ö†Ô∏è –ù–∞–≤—á–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –∑ –∫–æ–¥–æ–º {result.returncode}\n\nSTDOUT:\n{stdout}\n\nSTDERR:\n{stderr}",
                status_code=500,
                media_type="text/plain"
            )

    except subprocess.TimeoutExpired:
        logger.error(f"‚è∞ –°–∫—Ä–∏–ø—Ç {script_name} –ø–µ—Ä–µ–≤–∏—â–∏–≤ —Ç–∞–π–º–∞—É—Ç {TIMEOUT} —Å–µ–∫")
        return Response(
            content=f"‚è∞ –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞ {script_name} –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ ({TIMEOUT} —Å–µ–∫)",
            status_code=500,
            media_type="text/plain"
        )

    except Exception as e:
        logger.exception(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–∫—Ä–∏–ø—Ç–∞ {script_name}")
        return Response(
            content=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É {script_name}: {str(e)}",
            status_code=500,
            media_type="text/plain"
        )


# === üì° –ú–∞—Ä—à—Ä—É—Ç–∏ API ===

@router.post("/api/train/good")
def train_from_good():
    """–ù–∞–≤—á–∞–Ω–Ω—è –Ω–∞ good_dialogs"""
    return run_script("train_from_good.py")


@router.post("/api/train/bad")
def train_from_bad():
    """–ù–∞–≤—á–∞–Ω–Ω—è –Ω–∞ bad_dialogs"""
    return run_script("train_from_bad.py")


@router.post("/api/train/feedback")
def train_from_feedback():
    """–ù–∞–≤—á–∞–Ω–Ω—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ñ—ñ–¥–±–µ–∫—ñ–≤"""
    return run_script("feedback_processor.py")


@router.post("/api/train/real")
def train_from_real():
    """–ù–∞–≤—á–∞–Ω–Ω—è –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥–∞—Ö"""
    return run_script("training.py", ["real"])


@router.post("/api/train/all")
def train_all():
    """–ù–∞–≤—á–∞–Ω–Ω—è –Ω–∞ –≤—Å—ñ—Ö –¥–∂–µ—Ä–µ–ª–∞—Ö"""
    return run_script("training.py", ["all"])
