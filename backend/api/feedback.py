from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import List, Literal, Optional
from datetime import datetime
import os
import json
import hashlib
import logging

from config import FEEDBACK_COMMENTS_PATH, FEEDBACK_LESSONS_PATH
from backend.utils.jsonl_utils import append_jsonl, load_jsonl, save_jsonl, validate_dialog

router = APIRouter()
logger = logging.getLogger(__name__)

# ---------- üì¶ –ú–æ–¥–µ–ª—ñ ---------- #

class FeedbackItem(BaseModel):
    dialog: dict
    comment: str
    status: Literal["waiting", "applied", "rejected"] = "waiting"
    from_: Literal["good", "bad", "real", "refined", "manual"] = "manual"
    timestamp: Optional[str] = None
    dialog_id: Optional[str] = None

class FeedbackUpdate(BaseModel):
    index: int
    comment: Optional[str] = None
    status: Optional[Literal["waiting", "applied", "rejected"]] = None

# ---------- üìÅ –§—É–Ω–∫—Ü—ñ—ó ---------- #

def get_dialog_hash(dialog: dict) -> str:
    return hashlib.md5(json.dumps(dialog, sort_keys=True).encode("utf-8")).hexdigest()

# ---------- üîó API ---------- #

@router.get("/")
def get_feedback():
    """üì• –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ñ—ñ–¥–±–µ–∫–∏ (–∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞)"""
    logger.info("üì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ—ñ–¥–±–µ–∫—ñ–≤")
    return load_jsonl(FEEDBACK_COMMENTS_PATH)

@router.post("/")
def add_feedback(item: FeedbackItem):
    """‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ñ—ñ–¥–±–µ–∫"""
    if not item.comment.strip():
        raise HTTPException(status_code=400, detail="–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
    if not isinstance(item.dialog, dict) or "dialog" not in item.dialog:
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥—ñ–∞–ª–æ–≥—É")

    dialog_list = item.dialog.get("dialog")
    if not isinstance(dialog_list, list) or not validate_dialog(dialog_list):
        raise HTTPException(status_code=422, detail="–î—ñ–∞–ª–æ–≥ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —á–µ—Ä–≥—É–≤–∞–Ω–Ω—è user ‚Üí bot ‚Üí user ‚Üí ...")

    item.timestamp = item.timestamp or datetime.now().isoformat()
    item.dialog_id = get_dialog_hash(item.dialog)

    feedbacks = load_jsonl(FEEDBACK_COMMENTS_PATH)

    if any(fb.get("dialog_id") == item.dialog_id for fb in feedbacks):
        raise HTTPException(status_code=409, detail="–§—ñ–¥–±–µ–∫ –¥–ª—è —Ü—å–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É –≤–∂–µ —ñ—Å–Ω—É—î")

    feedbacks.append(item.dict())
    save_jsonl(FEEDBACK_COMMENTS_PATH, feedbacks)
    logger.info("‚úÖ –§—ñ–¥–±–µ–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ")

    return {
        "message": "‚úÖ –§—ñ–¥–±–µ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ",
        "total": len(feedbacks)
    }

@router.delete("/{index}")
def delete_feedback(index: int):
    """üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ—ñ–¥–±–µ–∫ –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º"""
    feedbacks = load_jsonl(FEEDBACK_COMMENTS_PATH)
    if 0 <= index < len(feedbacks):
        deleted = feedbacks.pop(index)
        save_jsonl(FEEDBACK_COMMENTS_PATH, feedbacks)
        logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ñ—ñ–¥–±–µ–∫ –∑ —ñ–Ω–¥–µ–∫—Å–æ–º {index}")
        return {"message": "üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ", "deleted": deleted}
    raise HTTPException(status_code=404, detail="–§—ñ–¥–±–µ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

@router.post("/update")
def update_feedback(update: FeedbackUpdate):
    """‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ —Ñ—ñ–¥–±–µ–∫"""
    feedbacks = load_jsonl(FEEDBACK_COMMENTS_PATH)
    if not (0 <= update.index < len(feedbacks)):
        raise HTTPException(status_code=404, detail="–§—ñ–¥–±–µ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    if update.comment is not None:
        feedbacks[update.index]["comment"] = update.comment.strip()

    if update.status is not None:
        feedbacks[update.index]["status"] = update.status

    save_jsonl(FEEDBACK_COMMENTS_PATH, feedbacks)
    logger.info(f"‚úèÔ∏è –û–Ω–æ–≤–ª–µ–Ω–æ —Ñ—ñ–¥–±–µ–∫ –∑ —ñ–Ω–¥–µ–∫—Å–æ–º {update.index}")
    return {"message": "‚úèÔ∏è –§—ñ–¥–±–µ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ"}
