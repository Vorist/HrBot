import os
import json
from datetime import datetime
from typing import List, Literal

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel

from config import FEEDBACK_LESSONS_PATH

router = APIRouter()

# ---------- –ú–û–î–ï–õ–Ü ---------- #
class FeedbackItem(BaseModel):
    dialog: dict
    comment: str
    status: Literal["waiting", "applied", "rejected"] = "waiting"
    from_: Literal["good", "bad", "real", "refined", "manual"] = "manual"
    timestamp: str | None = None


class FeedbackUpdate(BaseModel):
    index: int
    comment: str | None = None
    status: Literal["waiting", "applied", "rejected"] | None = None


# ---------- –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ---------- #
def load_feedback() -> List[dict]:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ—ñ–¥–±–µ–∫—ñ–≤ —ñ–∑ JSONL"""
    if not os.path.exists(FEEDBACK_LESSONS_PATH):
        return []
    with open(FEEDBACK_LESSONS_PATH, "r", encoding="utf-8") as f:
        lines = f.readlines()
    return [json.loads(line) for line in lines if line.strip()]


def save_feedback(feedbacks: List[dict]):
    """–ó–±–µ—Ä–µ–≥—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ñ—ñ–¥–±–µ–∫—ñ–≤ —É JSONL"""
    with open(FEEDBACK_LESSONS_PATH, "w", encoding="utf-8") as f:
        for item in feedbacks:
            f.write(json.dumps(item, ensure_ascii=False) + "\n")


# ---------- API ---------- #

@router.get("/api/feedback")
def get_feedback():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ñ—ñ–¥–±–µ–∫–∏"""
    return load_feedback()


@router.post("/api/feedback")
def add_feedback(item: FeedbackItem):
    """–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ñ—ñ–¥–±–µ–∫"""
    if not item.comment.strip():
        raise HTTPException(status_code=400, detail="–ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
    if not isinstance(item.dialog, dict) or "dialog" not in item.dialog:
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥—ñ–∞–ª–æ–≥—É")

    item.timestamp = item.timestamp or datetime.now().isoformat()

    feedbacks = load_feedback()
    feedbacks.append(item.dict())
    save_feedback(feedbacks)

    return {
        "message": "‚úÖ –§—ñ–¥–±–µ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ",
        "total": len(feedbacks)
    }


@router.delete("/api/feedback/{index}")
def delete_feedback(index: int):
    """–í–∏–¥–∞–ª–∏—Ç–∏ —Ñ—ñ–¥–±–µ–∫ –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º"""
    feedbacks = load_feedback()
    if 0 <= index < len(feedbacks):
        deleted = feedbacks.pop(index)
        save_feedback(feedbacks)
        return {
            "message": "üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ",
            "deleted": deleted
        }
    raise HTTPException(status_code=404, detail="–§—ñ–¥–±–µ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")


@router.post("/api/feedback/update")
def update_feedback(update: FeedbackUpdate):
    """–û–Ω–æ–≤–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ —Å—Ç–∞—Ç—É—Å —Ñ—ñ–¥–±–µ–∫—É"""
    feedbacks = load_feedback()
    if not (0 <= update.index < len(feedbacks)):
        raise HTTPException(status_code=404, detail="–§—ñ–¥–±–µ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    if update.comment is not None:
        feedbacks[update.index]["comment"] = update.comment.strip()

    if update.status is not None:
        feedbacks[update.index]["status"] = update.status

    save_feedback(feedbacks)
    return {"message": "‚úèÔ∏è –§—ñ–¥–±–µ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ"}
