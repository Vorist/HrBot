import os
import json
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import List
from datetime import datetime

from config import FEEDBACK_LESSONS_PATH

router = APIRouter()

# --- –ú–æ–¥–µ–ª—å —Ñ—ñ–¥–±–µ–∫—É --- #
class FeedbackItem(BaseModel):
    dialog: dict                      # –ü–æ–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥ (user/bot)
    comment: str                      # –ö–æ–º–µ–Ω—Ç–∞—Ä HR
    status: str = "waiting"           # ‚è≥ waiting / ‚úÖ applied / ‚ùå rejected
    from_: str = "manual"             # –î–∂–µ—Ä–µ–ª–æ: good/bad/real/refined
    timestamp: str = None             # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–æ—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è


# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ —Ñ—ñ–¥–±–µ–∫–∏ --- #
def load_feedback():
    if not os.path.exists(FEEDBACK_LESSONS_PATH):
        return []
    with open(FEEDBACK_LESSONS_PATH, "r", encoding="utf-8") as f:
        return [json.loads(line.strip()) for line in f if line.strip()]


# --- –ó–±–µ—Ä–µ–≥—Ç–∏ –≤—Å—ñ —Ñ—ñ–¥–±–µ–∫–∏ --- #
def save_feedback(feedbacks):
    with open(FEEDBACK_LESSONS_PATH, "w", encoding="utf-8") as f:
        for item in feedbacks:
            f.write(json.dumps(item, ensure_ascii=False) + "\n")


# --- –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ñ—ñ–¥–±–µ–∫ --- #
@router.post("/api/feedback")
def add_feedback(item: FeedbackItem):
    item.timestamp = item.timestamp or datetime.now().isoformat()
    data = load_feedback()
    data.append(item.dict())
    save_feedback(data)
    return {"message": "‚úÖ –§—ñ–¥–±–µ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ", "total": len(data)}


# --- –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ñ—ñ–¥–±–µ–∫–∏ --- #
@router.get("/api/feedback")
def get_feedback():
    return load_feedback()


# --- –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ—ñ–¥–±–µ–∫ –∑–∞ —ñ–Ω–¥–µ–∫—Å–æ–º --- #
@router.delete("/api/feedback/{index}")
def delete_feedback(index: int):
    feedbacks = load_feedback()
    if 0 <= index < len(feedbacks):
        deleted = feedbacks.pop(index)
        save_feedback(feedbacks)
        return {"message": "üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ", "deleted": deleted}
    raise HTTPException(status_code=404, detail="Feedback not found")


# --- –û–Ω–æ–≤–∏—Ç–∏ —Ñ—ñ–¥–±–µ–∫ (—Å—Ç–∞—Ç—É—Å –∞–±–æ –∫–æ–º–µ–Ω—Ç–∞—Ä) --- #
class FeedbackUpdate(BaseModel):
    index: int
    comment: str = None
    status: str = None

@router.post("/api/feedback/update")
def update_feedback(update: FeedbackUpdate):
    feedbacks = load_feedback()
    if 0 <= update.index < len(feedbacks):
        if update.comment is not None:
            feedbacks[update.index]["comment"] = update.comment
        if update.status is not None:
            feedbacks[update.index]["status"] = update.status
        save_feedback(feedbacks)
        return {"message": "‚úèÔ∏è –§—ñ–¥–±–µ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ"}
    raise HTTPException(status_code=404, detail="Feedback not found")
