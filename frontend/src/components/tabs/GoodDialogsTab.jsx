import React, { useEffect, useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { toast } from "sonner";

export default function GoodDialogsTab() {
  const [dialogs, setDialogs] = useState([]);
  const [newDialogText, setNewDialogText] = useState("");
  const [newUserName, setNewUserName] = useState("");
  const [comment, setComment] = useState({});
  const [expanded, setExpanded] = useState({});
  const [training, setTraining] = useState(false);

  useEffect(() => {
    fetch("/api/good_dialogs")
      .then((res) => res.json())
      .then(setDialogs)
      .catch(() => toast.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ good-–¥—ñ–∞–ª–æ–≥–∏"));
  }, []);

  const toggleExpand = (index) => {
    setExpanded((prev) => ({ ...prev, [index]: !prev[index] }));
  };

  const handleMarkBad = async (index) => {
    const feedback = comment[index] || "";

    try {
      await fetch("/api/good_dialogs/feedback", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ index, comment: feedback }),
      });

      setDialogs((prev) => prev.filter((_, i) => i !== index));
      toast.success("‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ bad + —Ñ—ñ–¥–±–µ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ");
    } catch {
      toast.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ñ –∞–±–æ —Ñ—ñ–¥–±–µ—Ü—ñ");
    }
  };

  const handleAdd = async () => {
    const user = newUserName.trim() || "–ö–∞–Ω–¥–∏–¥–∞—Ç";
    const lines = newDialogText.trim().split("\n").filter(Boolean);

    const dialog = lines
      .map((line) => {
        if (line.startsWith("üë§")) return { role: "user", text: line.slice(2).trim() };
        if (line.startsWith("ü§ñ")) return { role: "bot", text: line.slice(2).trim() };
        return null;
      })
      .filter(Boolean);

    if (!dialog.length) {
      toast.error("‚ö†Ô∏è –î—ñ–∞–ª–æ–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç");
      return;
    }

    try {
      const res = await fetch("/api/good_dialogs", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ user, dialog }),
      });

      if (!res.ok) throw new Error();
      const data = await res.json();
      setDialogs((prev) => [...prev, data]);
      setNewDialogText("");
      setNewUserName("");
      toast.success("‚úÖ –î–æ–¥–∞–Ω–æ –≤ good");
    } catch {
      toast.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥—ñ–∞–ª–æ–≥—É");
    }
  };

  const handleTrain = async () => {
    setTraining(true);
    try {
      const res = await fetch("/api/training/good", { method: "POST" });
      const log = await res.text();
      if (res.ok) {
        toast.success("üß† –ù–∞–≤—á–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
        console.log(log);
      } else {
        toast.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è");
        console.error(log);
      }
    } catch {
      toast.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–≤—á–∞–Ω–Ω—ñ");
    } finally {
      setTraining(false);
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold">‚úÖ –•–æ—Ä–æ—à—ñ –¥—ñ–∞–ª–æ–≥–∏</h2>
        <Button onClick={handleTrain} disabled={training}>
          {training ? "–ù–∞–≤—á–∞–Ω–Ω—è..." : "üß† –ù–∞–≤—á–∏—Ç–∏"}
        </Button>
      </div>

      {dialogs.map((dialog, index) => {
        const isExpanded = expanded[index];
        const dialogText = dialog.dialog
          .map((msg) => `${msg.role === "user" ? "üë§" : "ü§ñ"} ${msg.text}`)
          .join("\n");

        return (
          <Card key={index}>
            <CardContent className="space-y-2">
              <div
                className="cursor-pointer text-sm font-semibold"
                onClick={() => toggleExpand(index)}
              >
                üë§ {dialog.user} ‚Äî üìÖ {dialog.date} {isExpanded ? "‚ñ≤" : "‚ñº"}
              </div>

              {isExpanded && (
                <>
                  <pre className="whitespace-pre-wrap text-sm">
                    {dialogText}
                  </pre>

                  <Textarea
                    placeholder="‚úçÔ∏è –í–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä"
                    value={comment[index] || ""}
                    onChange={(e) =>
                      setComment({ ...comment, [index]: e.target.value })
                    }
                  />

                  <Button
                    size="sm"
                    variant="destructive"
                    onClick={() => handleMarkBad(index)}
                  >
                    ‚ùå –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ –ø–æ–≥–∞–Ω–∏–π
                  </Button>
                </>
              )}
            </CardContent>
          </Card>
        );
      })}

      <div className="flex flex-col gap-2 mt-4">
        <Input
          value={newUserName}
          onChange={(e) => setNewUserName(e.target.value)}
          placeholder="–Ü–º‚Äô—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ)"
        />
        <Textarea
          value={newDialogText}
          onChange={(e) => setNewDialogText(e.target.value)}
          placeholder="üì• –î–∂–µ—Ä–µ–ª–æ: Instagram\nüë§ –ü—Ä–∏–≤—ñ—Ç\nü§ñ –î–æ–±—Ä–æ–≥–æ –¥–Ω—è..."
          className="min-h-[100px]"
        />
        <Button onClick={handleAdd} className="self-end w-fit">
          ‚ûï –î–æ–¥–∞—Ç–∏
        </Button>
      </div>
    </div>
  );
}
