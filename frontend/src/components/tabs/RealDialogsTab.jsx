import React, { useEffect, useRef, useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { AnimatePresence, motion } from "framer-motion";
import { toast } from "react-hot-toast";

export default function RealDialogsTab() {
  const [dialogs, setDialogs] = useState([]);
  const [newDialog, setNewDialog] = useState("");
  const bottomRef = useRef(null);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥—ñ–∞–ª–æ–≥—ñ–≤
  useEffect(() => {
    fetch("/api/real_dialogs")
      .then((res) => res.json())
      .then(setDialogs)
      .catch(() => toast.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥–∏"));
  }, []);

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É
  const handleAddDialog = async () => {
    const text = newDialog.trim();
    if (!text) return;

    try {
      const res = await fetch("/api/real_dialogs", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text }),
      });

      if (!res.ok) throw new Error("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –¥–æ–¥–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥");

      const added = await res.json();
      setDialogs((prev) => [...prev, added]);
      setNewDialog("");

      setTimeout(() => {
        bottomRef.current?.scrollIntoView({ behavior: "smooth" });
      }, 100);

      toast.success("‚úÖ –î—ñ–∞–ª–æ–≥ –¥–æ–¥–∞–Ω–æ");
    } catch (err) {
      toast.error(err.message);
    }
  };

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É
  const handleDeleteDialog = async (index) => {
    try {
      const res = await fetch(`/api/real_dialogs/${index}`, {
        method: "DELETE",
      });

      if (!res.ok) throw new Error("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏");

      setDialogs((prev) => prev.filter((_, i) => i !== index));
      toast.success("üóëÔ∏è –î—ñ–∞–ª–æ–≥ –≤–∏–¥–∞–ª–µ–Ω–æ");
    } catch (err) {
      toast.error(err.message);
    }
  };

  // –ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥ –≤ good –∞–±–æ bad —ñ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
  const handleConvertAndTrain = async (index, target) => {
    try {
      const res = await fetch("/api/real_dialogs/convert", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ index, target }),
      });

      if (!res.ok) throw new Error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥");

      setDialogs((prev) => prev.filter((_, i) => i !== index));
      toast.success(`üì§ –ü–µ—Ä–µ–º—ñ—â–µ–Ω–æ —É ${target}`);

      // –ù–∞–≤—á–∞–Ω–Ω—è
      const trainRes = await fetch(`/api/training/${target}`, {
        method: "POST",
      });

      const log = await trainRes.text();
      if (trainRes.ok) {
        toast.success(`ü§ñ –ù–∞–≤—á–∞–Ω–Ω—è –Ω–∞ ${target} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
        console.log(log);
      } else {
        toast.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–≤—á–∞–Ω–Ω—ñ");
        console.error(log);
      }
    } catch (err) {
      toast.error(err.message);
    }
  };

  // –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–æ –¥—ñ–∞–ª–æ–≥—É –∑ –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞
  const extractMeta = (text) => {
    const sourceLine = text.split("\n").find((line) => line.startsWith("üì•"));
    return {
      source: sourceLine?.replace("üì•", "").trim() || "–ë–µ–∑ –¥–∂–µ—Ä–µ–ª–∞",
    };
  };

  return (
    <div className="space-y-4">
      <h2 className="text-xl font-semibold">üí¨ –†–µ–∞–ª—å–Ω—ñ –¥—ñ–∞–ª–æ–≥–∏</h2>

      <AnimatePresence>
        {dialogs.map((dialog, index) => {
          const { source } = extractMeta(dialog.text);
          return (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              transition={{ duration: 0.2 }}
            >
              <Card>
                <CardContent className="space-y-2">
                  <p className="text-sm text-gray-600">üì• {source}</p>
                  <pre className="whitespace-pre-wrap text-sm">
                    {dialog.text}
                  </pre>

                  <div className="flex gap-2 justify-end flex-wrap">
                    <Button
                      size="sm"
                      variant="destructive"
                      onClick={() => handleDeleteDialog(index)}
                    >
                      üóë –í–∏–¥–∞–ª–∏—Ç–∏
                    </Button>
                    <Button
                      size="sm"
                      onClick={() => handleConvertAndTrain(index, "good")}
                    >
                      üîÅ –í —Ö–æ—Ä–æ—à—ñ + –Ω–∞–≤—á–∏—Ç–∏
                    </Button>
                    <Button
                      size="sm"
                      onClick={() => handleConvertAndTrain(index, "bad")}
                    >
                      ‚ö†Ô∏è –í –ø–æ–≥–∞–Ω—ñ + –Ω–∞–≤—á–∏—Ç–∏
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          );
        })}
      </AnimatePresence>

      <div className="flex flex-col gap-2 mt-4">
        <Textarea
          value={newDialog}
          onChange={(e) => setNewDialog(e.target.value)}
          placeholder={`üì• –î–∂–µ—Ä–µ–ª–æ: Instagram\nüë§ –ü—Ä–∏–≤—ñ—Ç\nü§ñ –î–æ–±—Ä–æ–≥–æ –¥–Ω—è...`}
          className="min-h-[120px]"
        />
        <Button onClick={handleAddDialog} className="self-end w-fit">
          ‚ûï –î–æ–¥–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥
        </Button>
      </div>

      <div ref={bottomRef} />
    </div>
  );
}
